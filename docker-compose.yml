services:
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: "sqlite:///./delivery.db"
      LOGISTICS_A_URL: "http://mock_a:8080/logistics_a/deliveries"
      LOGISTICS_B_URL: "http://mock_b:8080/logistics_b/deliveries"
      PYTHONPATH: "/app"        # ðŸ”§ Tell Python where to find the backend package
    working_dir: /app           # ðŸ”§ Ensure we're running inside /app
    command: gunicorn backend.main:app \
             --workers 1 \
             --worker-class uvicorn.workers.UvicornWorker \
             --bind 0.0.0.0:80  # ðŸ”§ Match Traefik config (port 80 inside container)
    volumes:
      - ./backend:/app/backend          # ðŸ”§ Mount your backend code to /app
      - ./backend_data:/app/backend/backend_data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/backend/deliveries`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=80"

  mock_a:
    build:
      context: ./mock_logistics_a
      dockerfile: Dockerfile
    command: uvicorn app:app --host 0.0.0.0 --port 8080 --no-access-log
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mock_a.rule=Host(`localhost`) && PathPrefix(`/logistics_a`)"
      - "traefik.http.routers.mock_a.entrypoints=web"
      - "traefik.http.services.mock_a.loadbalancer.server.port=8080"

  mock_b:
    build:
      context: ./mock_logistics_b
      dockerfile: Dockerfile
    command: uvicorn app:app --host 0.0.0.0 --port 8080 --no-access-log
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mock_b.rule=Host(`localhost`) && PathPrefix(`/logistics_b`)"
      - "traefik.http.routers.mock_b.entrypoints=web"
      - "traefik.http.services.mock_b.loadbalancer.server.port=8080"

  traefik:
    image: traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:8000
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  backend_data: